alias sorter d0
alias silo d1
alias reqIC d2
alias orderIngot d3
alias lcd d4

define item 156348098 #Waspaloy
define itemShort 32 #Waspaloy

define stackSize 500
define threshold 2 # 1 to 10

alias ordered r8
alias rVal r9
alias rQty r10 #4
alias rInf r11
alias rDev r12
alias rMat r13
alias rStat r14 #1
alias rFlag r15

s silo On 1 #Silo
s silo Mode 1
sb -2020231820 On 1 # stacker Left
sb 1585641623 On 1 # stacker Right
sb -2020231820 Setting stackSize # stacker Left
sb 1585641623 Setting stackSize # stacker Right
s sorter On 1
s sorter Mode 2

main:
yield
ls r0 sorter 0 OccupantHash
seqz r1 r0
seq r0 r0 item # No double item here
sub r0 r0 r1
s sorter Output r0 # End of sorting
l rVal reqIC Setting # Begining of request
move r0 15 # Set loop init value
move rQty rVal
mod rr0 rQty 100 # Loop begin w/ Flag
div rQty rQty 100 # Rest goes to Qty
floor rQty rQty #  next, Stat Mat Dev Inf Qty
sub r0 r0 1
brgt r0 10 -4 # Move to loop begin
beqal rMat itemShort requested
l r1 silo Quantity
brdns lcd 2
s lcd Setting r1
lb r2 554524804 Setting Average # Load from dial
mul r3 r2 threshold
blt r1 r3 order
move ordered 0
j main

requested:
bne rStat 2 ra # Request only when rStat == 2
bnez rInf ra   # && rInf == 0
add r3 rVal 1 # Set Ack and wait for feedback
s reqIC Setting r3
add r3 r3 1
l r4 reqIC Setting
breqz r4 2
brne r4 r3 -2
div r0 rQty stackSize
ceil r0 r0
l r1 silo Quantity
slt r2 r1 r0
select r2 r2 700 100 # Prepare rStat Update
add rVal rVal r2
bne r2 100 ra
bgtz r0 export
j ra

export:
s silo Open 1
yield
s silo Open 0
sleep 2
sub r0 r0 1
bgtz r0 export
add r3 rVal 1      # Set updated rVal, wait
l r4 reqIC Setting # for SynAck & Ack
brnez r4 -1
s reqIC Setting rVal
l r4 reqIC Setting
breq r4 rVal -1
brne r4 r3 -4
add r3 r4 1
s reqIC Setting r3
j ra

order:
bnez ordered main
l r0 orderIngot Setting
bnez r0 ra
mul r3 threshold 80000 # QQ.MM.FF from 8 to 80
add r3 r3 1 # Prepare Syn
mul r0 itemShort 100
add r0 r0 r3
add r1 r0 1 # Prepare Syn Ack
s orderIngot Setting r0
yield
l r2 orderIngot Setting
breqz r2 -3
breq r2 r0 -3 # Loop until change
bne r2 r1 ra # If not syn ack, cancel
add r0 r1 1 # prepare Ack
s orderIngot Setting r0
move ordered 1
j main